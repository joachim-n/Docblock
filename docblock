#!/usr/bin/perl

# Converts plain text to documentation formatted lines, with initial characters
# and wrapped to 80 characters. Paragraph breaks are preserved.
# by Joachim Noreiko.
# Released under GPL yada yada.

use warnings;

# Configuration: what goes at the start of the lines.
my $line_start = q[ * ]; # PHD DocBlock.
my $line_length = 80;

$\ = "\n";

# Enable localized slurp mode to read in given file(s).
local $/;
my $text = <STDIN>;

# Remove the line start (optionally trimmed) from incoming text.
(my $line_start_trimmed = $line_start) =~ s/\s$//;
$text =~ s[^\Q$line_start\E][]gm;
$text =~ s[^\Q$line_start_trimmed\E][]gm;

# Join up paragraphs. A single line break, that doesn't have a bullet point on
# the next line, is removed, making sure to preserve/add a space between words.
$text =~ s/
  (?<=[^\n])  # lookbehind: not a newline
  \ *\n       # optional space and then the newline we grab.
  (?=[^ \n ]) # lookahead: not another newline.
  (?!\s*-)    # lookahead: not a bullet, optionally indented.
  /\ /gx;

# Grab as much as we can for a line, not breaking words,
# but don't take a newline or a space at the end.
my $offset = $line_length - length($line_start);
my $current_offset = $offset;
my @lines;
my $indent = 0;
while ($text) {
  # Extract a line's worth of text.
  $text =~ s[(.{0,$current_offset})(?: |\n|\Z)]{
    # Extract the capture.
    $extract = $1;
    # Return an empty string to be the replacement.
    '';
  }e;

  # If the current extracted line has a bullet or is blank, clear any indent.
  if ($extract =~ /^-/ || $extract eq '') {
    $current_offset = $offset;
    $indent = 0;
  }

  $indented_extract = (' ' x ($indent * 2))  . $extract;

  push @lines, $indented_extract;

  # If the current extracted line has a bullet, set the indent for the next line.
  if ($extract =~ /^-/) {
    $current_offset += 2;
    $indent = 1;
    print $indent;
  }
}

# Debug.
#use Data::Dumper;
#print Dumper(@lines);

# Add the line start string.
map { s/^/$line_start/ } @lines;
# Strip whitespace at the end of lines.
map { s/\s+$// } @lines;

# Output.
print join $\, @lines;


